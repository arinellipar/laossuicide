// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// Auth.js Models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String           @id @default(cuid())
  email         String?          @unique
  emailVerified DateTime?
  image         String?
  name          String?
  password      String? // For credential-based auth
  role          UserRole         @default(USER)
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  accounts      Account[]
  sessions      Session[]
  orders        Order[]
  cartItems     CartItem[]
  preferences   UserPreferences?
  notifications Notification[]
  auditLogs     AuditLog[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// User Role Enumeration
enum UserRole {
  USER
  ADMIN
  SUPER_ADMIN
  STAFF
}

// User Preferences
model UserPreferences {
  id                 String   @id @default(cuid())
  userId             String   @unique
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  emailNotifications Boolean  @default(true)
  smsNotifications   Boolean  @default(false)
  darkMode           Boolean  @default(true)
  language           String   @default("en")
  currency           String   @default("USD")
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}

// E-commerce Models
model Product {
  id             String           @id @default(cuid())
  name           String
  description    String?
  slug           String           @unique
  category       ProductCategory
  price          Decimal          @db.Money
  compareAtPrice Decimal?         @db.Money
  cost           Decimal?         @db.Money
  sku            String           @unique
  barcode        String?
  trackQuantity  Boolean          @default(true)
  quantity       Int              @default(0)
  images         ProductImage[]
  variants       ProductVariant[]
  active         Boolean          @default(true)
  featured       Boolean          @default(false)
  tags           String[]
  metadata       Json?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  orderItems     OrderItem[]
  cartItems      CartItem[]
  inventoryLogs  InventoryLog[]
}

model ProductImage {
  id        String   @id @default(cuid())
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  url       String
  alt       String?
  position  Int      @default(0)
  createdAt DateTime @default(now())
}

model ProductVariant {
  id         String      @id @default(cuid())
  productId  String
  product    Product     @relation(fields: [productId], references: [id], onDelete: Cascade)
  name       String
  value      String
  price      Decimal?    @db.Money
  quantity   Int         @default(0)
  sku        String      @unique
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  orderItems OrderItem[]
  cartItems  CartItem[]
}

enum ProductCategory {
  MERCHANDISE
  TICKET
  DIGITAL
  BUNDLE
}

// Event/Show Management
model Event {
  id            String       @id @default(cuid())
  name          String
  description   String?
  venue         String
  address       String
  city          String
  state         String?
  country       String
  postalCode    String?
  startDateTime DateTime
  endDateTime   DateTime?
  capacity      Int
  ticketsSold   Int          @default(0)
  images        EventImage[]
  tickets       Ticket[]
  active        Boolean      @default(true)
  featured      Boolean      @default(false)
  metadata      Json?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}

model EventImage {
  id        String   @id @default(cuid())
  eventId   String
  event     Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  url       String
  alt       String?
  position  Int      @default(0)
  createdAt DateTime @default(now())
}

model Ticket {
  id          String      @id @default(cuid())
  eventId     String
  event       Event       @relation(fields: [eventId], references: [id], onDelete: Cascade)
  name        String
  description String?
  price       Decimal     @db.Money
  quantity    Int
  sold        Int         @default(0)
  maxPerOrder Int         @default(10)
  saleStart   DateTime?
  saleEnd     DateTime?
  active      Boolean     @default(true)
  orderItems  OrderItem[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  CartItem    CartItem[]
}

// Shopping Cart
model CartItem {
  id        String          @id @default(cuid())
  userId    String
  user      User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId String?
  product   Product?        @relation(fields: [productId], references: [id], onDelete: Cascade)
  variantId String?
  variant   ProductVariant? @relation(fields: [variantId], references: [id], onDelete: Cascade)
  ticketId  String?
  ticket    Ticket?         @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  quantity  Int
  metadata  Json?
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
}

// Orders
model Order {
  id              String        @id @default(cuid())
  orderNumber     String        @unique
  userId          String
  user            User          @relation(fields: [userId], references: [id])
  status          OrderStatus   @default(PENDING)
  subtotal        Decimal       @db.Money
  tax             Decimal       @db.Money
  shipping        Decimal       @db.Money
  total           Decimal       @db.Money
  currency        String        @default("USD")
  items           OrderItem[]
  shippingAddress Json?
  billingAddress  Json?
  paymentMethod   String?
  paymentStatus   PaymentStatus @default(PENDING)
  stripePaymentId String?
  notes           String?
  metadata        Json?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  shipments       Shipment[]
  refunds         Refund[]
}

model OrderItem {
  id        String          @id @default(cuid())
  orderId   String
  order     Order           @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId String?
  product   Product?        @relation(fields: [productId], references: [id])
  variantId String?
  variant   ProductVariant? @relation(fields: [variantId], references: [id])
  ticketId  String?
  ticket    Ticket?         @relation(fields: [ticketId], references: [id])
  name      String
  price     Decimal         @db.Money
  quantity  Int
  total     Decimal         @db.Money
  metadata  Json?
  createdAt DateTime        @default(now())
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  PROCESSING
  SUCCEEDED
  FAILED
  CANCELLED
  REFUNDED
  PARTIALLY_REFUNDED
}

// Shipping
model Shipment {
  id             String         @id @default(cuid())
  orderId        String
  order          Order          @relation(fields: [orderId], references: [id], onDelete: Cascade)
  trackingNumber String?
  carrier        String?
  status         ShipmentStatus @default(PENDING)
  shippedAt      DateTime?
  deliveredAt    DateTime?
  metadata       Json?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
}

enum ShipmentStatus {
  PENDING
  PROCESSING
  SHIPPED
  IN_TRANSIT
  DELIVERED
  RETURNED
}

// Refunds
model Refund {
  id        String       @id @default(cuid())
  orderId   String
  order     Order        @relation(fields: [orderId], references: [id], onDelete: Cascade)
  amount    Decimal      @db.Money
  reason    String?
  status    RefundStatus @default(PENDING)
  metadata  Json?
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
}

enum RefundStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
}

// Inventory Management
model InventoryLog {
  id          String          @id @default(cuid())
  productId   String
  product     Product         @relation(fields: [productId], references: [id], onDelete: Cascade)
  type        InventoryAction
  quantity    Int
  previousQty Int
  newQty      Int
  reason      String?
  userId      String?
  metadata    Json?
  createdAt   DateTime        @default(now())
}

enum InventoryAction {
  PURCHASE
  SALE
  RETURN
  ADJUSTMENT
  RESTOCK
  DAMAGE
  LOSS
}

// Analytics & Reporting
model Analytics {
  id        String   @id @default(cuid())
  date      DateTime @db.Date
  revenue   Decimal  @db.Money
  orders    Int
  visitors  Int
  metadata  Json?
  createdAt DateTime @default(now())

  @@unique([date])
}

// Notifications
model Notification {
  id        String           @id @default(cuid())
  userId    String
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  type      NotificationType
  title     String
  message   String
  read      Boolean          @default(false)
  metadata  Json?
  createdAt DateTime         @default(now())
}

enum NotificationType {
  ORDER_PLACED
  ORDER_SHIPPED
  ORDER_DELIVERED
  PAYMENT_RECEIVED
  REFUND_PROCESSED
  TICKET_PURCHASED
  EVENT_REMINDER
  SYSTEM
}

// Audit Logging
model AuditLog {
  id        String   @id @default(cuid())
  userId    String?
  user      User?    @relation(fields: [userId], references: [id])
  action    String
  entity    String
  entityId  String?
  oldValue  Json?
  newValue  Json?
  ipAddress String?
  userAgent String?
  metadata  Json?
  createdAt DateTime @default(now())
}
